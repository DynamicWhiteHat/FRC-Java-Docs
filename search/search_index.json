{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome To The Guide To FRC Java","text":"<p>This site serves as a starting point for learning to code for FRC.</p> <p>Make your way through the pages to gain a foundation for programming on the team.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>If you're new, start with the Getting Started Guide to set up your tools and environment.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Java Basics</li> <li>FRC-Specific Programming</li> </ul>"},{"location":"#useful-links","title":"Useful Links","text":"<ul> <li>422 Github</li> <li>WPILib Website</li> <li>WPILib API Docs</li> </ul>"},{"location":"#need-help","title":"Need Help?","text":"<p>If you have questions, feel free to reach out to team members.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>This page is for contributors for this website.</p> <p>Check out the source code to learn how each piece is made</p> <p>For full documentation visit mkdocs.org.</p>"},{"location":"contributing/#code-snippets","title":"Code Snippets","text":"Example Java code<pre><code>// This is an example of Jave code with line numbers and lines 3-4 highlighted\nint teamNum = 422\nif (teamNum==422) {\n    System.out.println(\"This is team 422\");\n}\nelse {\n    System.out.println(\"This is not team 422\");\n}\n</code></pre>"},{"location":"contributing/#content-tabs","title":"Content Tabs","text":"Plain TextUnordered ListOrdered List <p>Use the bars above to navigate</p> <ul> <li>First</li> <li>Second</li> <li>Third</li> </ul> <ol> <li>First</li> <li>Second</li> <li>Third</li> </ol>"},{"location":"contributing/#code-with-content-tabs","title":"Code With Content Tabs","text":"JavaPython <pre><code>int teamNum = 422\nSystem.out.println(teamNum + \" wins worlds!\");\n</code></pre> <pre><code>teamNum=422\nprint(teamNum +\" wins worlds!\")\n</code></pre>"},{"location":"contributing/#admonitions-ie-callouts","title":"Admonitions (ie Callouts)","text":""},{"location":"contributing/#regular","title":"Regular","text":"<p>Important Note</p> <p>The class name MUST match the name of the file for your code to run.</p>"},{"location":"contributing/#collapsible","title":"Collapsible","text":"Collapsible Note <p>If you are missing the run code button, make sure your file is saved!</p>"},{"location":"contributing/#different-icon","title":"Different Icon","text":"Want more icons? <p>Visit this link to find the list of supported icons.</p>"},{"location":"contributing/#diagrams","title":"Diagrams","text":""},{"location":"contributing/#flowcharts","title":"Flowcharts","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Failure?};\n  B --&gt;|Yes| C[Investigate...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Success!];</code></pre>"},{"location":"contributing/#sequence-diagrams","title":"Sequence Diagrams","text":"<pre><code>sequenceDiagram\n  autonumber\n  Server-&gt;&gt;Terminal: Send request\n  loop Health\n      Terminal-&gt;&gt;Terminal: Check for health\n  end\n  Note right of Terminal: System online\n  Terminal--&gt;&gt;Server: Everything is OK\n  Terminal-&gt;&gt;Database: Request customer data\n  Database--&gt;&gt;Terminal: Customer data</code></pre>"},{"location":"gettingStarted/","title":"Getting Started","text":"<p>Welcome! Your journey as a programmer for FRC starts here. Before we being programming, there are a few things we must download and get set up.</p>"},{"location":"gettingStarted/#installing-wpilib-vs-code","title":"Installing WPILib VS Code","text":"<p>WPILib is an open-source framework for FRC programming provided by the WPI Institute. They provide WPILib VS Code, which is what we will be using to code.</p> <p> </p> <p>Go here and scroll down to download the installer. This should download an iso file.</p> <p>Once you finish downloading, double click the .iso file to open it in your file explorer. Here, double click WPILibInstaller.exe.</p> <p>If you get a \"Windows protected your PC\" prompt, hit \"More info\" then \"Run anyway\". This should show once you hit start:</p> <p> </p> <p>Select the options from above and hit install for this user. Next, select <code>Download for this computer only</code>.</p> <p>Once it finishes installing, you can close the window. WPILib is now installed.</p>"},{"location":"gettingStarted/#installing-git","title":"Installing Git","text":"<p>422, and most organizations around the world use Github to store their code. Similar to Google Docs, Github is a repository where code it stored so that everyone can access it. Git is a command line tool that will allow us to pull the code from the online Github repository onto our own machine so that we can edit the code.</p> WindowsMacBooks <p>Go here and download the Git for Windows/x64 Setup option.</p> <p>Open the installer and hit next until you get to the install button. Hit install.</p> <p>Once done, uncheck both boxes and hit finish.</p> MacBooks <p>Most MacBooks today ship with Git already installed. If you are unsure if you have it, skip this step and move to testing Git to check it out.</p> <p>MacBooks without Git already installed will need to install Homebrew first. Open your terminal and paste the following line into it and hit enter: <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> Once you finish installing Homebrew, paste the following line into the temrinal and hit enter: <pre><code>brew install git\n</code></pre></p>"},{"location":"gettingStarted/#testing-wpilib-and-git","title":"Testing WPILib and Git","text":"<p>This is the final step. Once you have both WPILib and Git installed, you can test Git. </p> <p>Open WPILib VS Code. On Windows, this comes in the search window as VS Code, not VSCode. Once you open it, you should be presented with something similar to this screen:</p> <p> </p> <p>Hit Ctrl+Shift+~ to enter the terminal (CMD+Shift+~ on MacBooks). Type the following and hit enter to check if git is working: <pre><code>git --version\n</code></pre> If you get something similar to below, Git is working. <pre><code>git version 2.51.0.windows.1\n</code></pre></p> <p>Finished</p> <p>If you have successfully installed WPILib and Git and ensured Git is working, you are set to code for 422!</p>"},{"location":"introToJava/javaLesson1/","title":"Lesson 1 - Methods and Members","text":""},{"location":"introToJava/javaLesson1/#setting-up-for-code","title":"Setting up for code","text":"<p>Before you start coding, its always best to set up an environment where you can keep track of your code. Create a folder where you can store your code. Personally, I have a Java folder in my Documents.</p>"},{"location":"introToJava/javaLesson1/#methods-and-members","title":"Methods and Members","text":"<p>Objects in Java are made up of two main parts: members and methods. Members hold information about the object, while methods are the actions the object can do.</p>"},{"location":"introToJava/javaLesson1/#members","title":"Members","text":"<p>Members, also called attributes or variables, are characteristics of an object that you can define and change later. For example, if you were making a car, you might want to define its color, top speed, and miles per gallon. Keep in mind that these values are allowed to change, so something like fuel level, which changes over time, would still be a member.</p> <p>When defining a member in Java, you must follow proper syntax. The correct way to define a member is shown below.</p> <p>Syntax</p> <p>Syntax is a set of rules you must follow for Java to be able to understand you. Much like how English requires proper grammar, Java requires proper syntax to work. In Java, most statements (like variable definitions or method calls) must end with a semicolon (;).</p> Syntax for defining a member<pre><code>type   name    = value;\n\nint wheelCount = 4;\n</code></pre>"},{"location":"introToJava/javaLesson1/#data-types","title":"Data types","text":"<p>Whenever you create a member, you must first assign it a type. Type is a reference to the data type of the variable. The following are data types used in FRC Java: <code>int</code>, <code>String</code>, <code>double</code>, and <code>boolean</code>.</p> <ul> <li><code>int</code>: This stands for integer. An integer is any whole number that we would want to use. For the car example, we might use <code>int</code> for the number of wheels, since we can't have a fraction of a wheel.</li> <li><code>String</code>: A string is any combination of characters. This is used almost exclusively for logging errors in FRC Java. If we didn't know why the car wasn't driving, we might want to print out \"not driving\" at times to test it, which would use a <code>String</code>.</li> <li><code>double</code>: This is used for decimal values. For the car example, we might use <code>double</code> for the car\u2019s speed, since a car can travel at 55.5 miles per hour or 32.7 km/h, not just whole numbers.</li> <li><code>boolean</code>: This data type can only be either <code>true</code> or <code>false</code> (lowercase only). It is used in conditionals, which is ued to make decisions in code. For example, we might say, \"if the car in on, start moving.\" The \"if the car is on\" part could be represented by a <code>boolean</code>.</li> </ul>"},{"location":"introToJava/javaLesson1/#name","title":"Name","text":"<p>The name of a member can be anything you like. Although this is the case, it is best give a member a name that is representative of what it is. For example, <code>fuelLevel</code> would be a much better name for the car's fuel level than <code>thing1</code>. Names must be one word to follow proper syntax, otherwise Java would throw an error.</p> <p>Camel Case</p> <p>Did you notice that the capitalization was funky in the code above? This is called camel case, which is when we capitalize the first letter of every word in a variable, save for the first word. For example, \"constant speed\" would be written as <code>constantSpeed</code>.</p>"},{"location":"introToJava/javaLesson1/#value","title":"Value","text":"<p>The value of the member must match the type it is assigned. For example, you cannot assign a value of <code>true</code> to an <code>int</code> object, as <code>int</code> expects a whole number. As long as it falls within the expected type, the value can be as large as you need it to be.</p>"},{"location":"introToJava/javaLesson1/#using-members","title":"Using members","text":"<p>The value of members can be used and updated throughout your code, which is what makes them so powerful. Once you've defined the <code>type</code> for the member, you can update it without having to redefine its type. In the below example, <code>message</code> is created as a String, and its value gets changed.</p> CodeOutput <pre><code>String message = \"hello world\";\nSystem.out.println(message);\nmessage = \"Java is cool\";\nSystem.out.println(message);\n</code></pre> <pre><code>hello world\nJava is cool\n</code></pre>"},{"location":"introToJava/javaLesson1/#methods","title":"Methods","text":"<p>Methods, also known as functions, are actions that an object can do. In the case of the car example, methods could be <code>drive()</code>, <code>turnOnLights()</code>, and <code>slowDown()</code>.</p> <p>The proper syntax to define a method is shown below:</p> Syntax for defining a method<pre><code>accessModifier returnType name(parameters) {\n    // code goes here\n}\n\npublic void slowDown() {\n    // code goes here\n}\n</code></pre>"},{"location":"introToJava/javaLesson1/#access-modifier","title":"Access modifier","text":"<p>The first part of defining a method is the access modifier. This tells Java who can access, or run, the method. There are three types of access modifiers: <code>public</code>, <code>private</code>, and <code>protected</code>. <code>Public</code> means that anyone can access it from anywhere, including from outside the file the method is created in. <code>Private</code> means that access is limited to a certain level, such as only the current class. <code>Protected</code>, which isn't used as much in FRC, is more accessible than <code>Private</code>, but is still limited in access, typically only to the current class and its subclasses.</p>"},{"location":"introToJava/javaLesson1/#return-type","title":"Return type","text":"<p>The second part of a method is its return type. The return type tells Java if you plan to return, or output, some value to whoever called the function. This is done using the <code>return</code> statement. For example, when you speed up the car, you don't get any information back, thus it wouldn't require a return statement. However, checking the navigation would require back some map data for you to be able to tell where you are, which would require a return statement.</p> Example use of return<pre><code>public int calculateRemainingMiles() {\n    int milesRemaining = \"insert cool math here\";\n    return milesRemaining;\n}\n</code></pre> <p>In the above example, you can see how the number of miles remaining is being returned to whoever called the method. In this case, since milesRemaining is an int, the return type is set to <code>int</code>.</p>"},{"location":"introToJava/javaLesson1/#name_1","title":"Name","text":"<p>Much like members, the name of a method can be anything you want. It is common practice to name it something related to what the method does.</p>"},{"location":"introToJava/javaLesson1/#parameters","title":"Parameters","text":"<p>Parameters are things that the method can take in to manipulate or make decisions. Not all methods need parameters. The following example shows a parameter <code>vehicleType</code> being used to determine how many wheels a car has.</p> CodeOutput <pre><code>public void determineVehicleWheels(String vehicleType) {\n    if (vehicleType == \"sedan\") {\n        System.out.println(\"This has 4 wheels\");\n    }\n    else if (vehicleType == \"truck\") {\n        System.out.println(\"This has 8 wheels\");\n    }\n}\n\ndetermineVehicleWheels(\"sedan\");\n</code></pre> <pre><code>This has 4 wheels\n</code></pre>"},{"location":"introToJava/javaLesson1/#curly-bracketsbraces","title":"Curly brackets/braces","text":"<p>The <code>{}</code> is the final key component of a method. This is what will serve as the boundary or fence of the code for your method. The code you write for your method to do something must lie withint the opening, <code>{</code>, and closing ,<code>}</code>, brackets.</p>"},{"location":"introToJava/javaLesson1/#practice","title":"Practice","text":"<p>See if you can correctly identify the methods and members for the following, which is part of code creating an animal.</p> IdentifyAnswers <pre><code>int numLegs\npublic void eat() {}\nprivate int returnFriendCount() {}\nString name\ndouble hoursOld\n</code></pre> <pre><code>int numLegs // member\npublic void eat() {} // method\nprivate int returnFriendCount() {} // method\nString name // member\ndouble hoursOld // member\n</code></pre>"},{"location":"introToJava/javaLesson2/","title":"Lesson 2: Comparision Operators, Conditionals And For Loops","text":""},{"location":"introToJava/javaLesson2/#operators","title":"Operators","text":""},{"location":"introToJava/javaLesson2/#comparision-operators","title":"Comparision operators","text":"<p>Operators in Java are typically grouped into categories depending on their function. One of these is the comparision operators, which are used to compare two values. This is especially important for conditionals and for loops, as it defines when they run or how long to run for. Below is a list of operators which are used commonly.</p> <ul> <li> <p><code>==</code>: Equal to (5 == 5 \u2192 true)</p> </li> <li> <p><code>!=</code>: Not equal to (5 != 3 \u2192 true)</p> </li> <li> <p><code>&gt;</code>: Greater than (7 &gt; 4 \u2192 true)</p> </li> <li> <p><code>&lt;</code>: Less than (2 &lt; 6 \u2192 true)</p> </li> <li> <p><code>&gt;=</code>: Greater than or equal to (7 &gt;= 7 \u2192 true)</p> </li> <li> <p><code>&lt;=</code>: Less than or equal to (3 &lt;= 5 \u2192 true)</p> </li> </ul> <p>Comparision operators will output a boolean value, either true or false, depending on the values provided. You can use the output for setting members, using conditionals, and more. Below is an example of using comparision operators.</p> <pre><code>boolean isGreater = 5&gt;7;\n// isGreater is false\nif (5==5) {\n    System.out.println(\"This is true\");\n}\n</code></pre>"},{"location":"introToJava/javaLesson2/#arithmetic-operators","title":"Arithmetic operators","text":"<p>Arithmetic operators are used for basic mathematical operations, such as adding or subtracting two values. Here is a list of common arithmetic operators:</p> <ul> <li><code>+</code>: Addition</li> <li><code>-</code>: Subtraction</li> <li><code>*</code>: Multiplication</li> <li><code>/</code>: Division</li> <li><code>%</code>: Modulus (remainder after division)</li> </ul> <p>Using arithmetic operators is simple. Just place them between the two values you want to use it on.</p> <pre><code>int a = 5;\nint b = 6;\nSystem.out.println(a+b);\nSystem.out.println(a%b);\n</code></pre> Output<pre><code>11\n1\n</code></pre>"},{"location":"introToJava/javaLesson2/#conditionals","title":"Conditionals","text":"<p>A conditional is a way to make choices based on the current situation. The program asks itself is this true?, and if so do this, otherwise, do something else. The diagram below shows a visual representation of a conditional.</p> <pre><code>graph LR\n    A[Is this true?] --&gt; |Yes|B[Do This];\n    A[Is this true?] --&gt; |No|C[Do This Instead];</code></pre> <p>Java has three types of conditional statements, <code>if</code>, <code>else if</code>, and <code>else</code>.</p>"},{"location":"introToJava/javaLesson2/#if-statements","title":"If statements","text":"<p>An <code>if</code> statement is the first part of any conditional. It initiates the check by asking if something is equal to some value. The syntax for an <code>if</code> statement is shown below.</p> <pre><code>if (condition) {\n    // do this\n}\nif (vehicle.color == \"red\") {\n    System.out.println(\"The car is red\");\n}\n</code></pre> <p>The condition can be anything that you want Java to evaluate. It could be some basic math operations, such as <code>5&gt;6</code>, which would evaluate to false. It could also use variables (members) from last lesson, such as <code>if(boolean)</code>, which will always evaluate to either true or false, since those are the only two values a <code>boolean</code> can store. The above example checks if the color of the vehicle is red, and if so, print out \"The car is red\".</p>"},{"location":"introToJava/javaLesson2/#else-statements","title":"Else statements","text":"<p>An <code>else</code> statement is the next conditional in the flow of a conditional chain. This serves as the alternative action if the first <code>if</code> statement evaluates to false.</p> <pre><code>if (condition) {\n    // do this\n}\n\nelse {\n    // do this\n}\n\nif (vehicle.color == \"red\") {\n    System.out.println(\"The car is red\");\n}\n\nelse {\n    System.out.println(\"The car is not red\");\n}\n</code></pre> <p>In the example above, the first if statement checks whether the car is red. If the car is not red, that condition evaluates to false, and the program moves to the <code>else</code> block. The <code>else</code> block doesn\u2019t have its own condition, it simply runs whenever the if statement fails, acting like a \u201ccatch-all\u201d for everything that wasn\u2019t true.</p>"},{"location":"introToJava/javaLesson2/#else-if-statements","title":"Else if statements","text":"<p>What if you wanted to check if the car was blue? Although you could technically put multiple <code>if</code> statements one-after-another, Java has an efficient way to check different conditions, called an <code>else if</code> block. Check out the example below to see the difference.</p> Bad exampleGood example <pre><code>if (vehicle.color == \"red\") {\n    System.out.println(\"The car is red\");\n}\n\nif (vehicle.color == \"blue\") {\n    System.out.println(\"The car is blue\");\n}\n\nif (vehicle.color == \"orange\") {\n    System.out.println(\"The car is orange\");\n}\n\nelse {\n    System.out.println(\"The car is not red\");\n}\n</code></pre> <pre><code>if (vehicle.color == \"red\") {\n    System.out.println(\"The car is red\");\n}\n\nelse if (vehicle.color == \"blue\") {\n    System.out.println(\"The car is blue\");\n}\n\nelse if (vehicle.color == \"orange\") {\n    System.out.println(\"The car is orange\");\n}\n\nelse {\n    System.out.println(\"The car is not red\");\n}\n</code></pre> <p>Notice how only the middle two <code>if</code> statements were changed to <code>else if</code>. This small change makes the code much more efficient:</p> <ul> <li> <p>With <code>else if</code>, Java stops checking as soon as one condition is true. For example, if the car is blue, Java checks red, then checks blue, and then exits the chain immediately.</p> </li> <li> <p>With separate <code>if</code> statements, Java would still check all the other conditions, even if one was already true. That means if the car is blue, it would still check orange, which is unnecessary.</p> </li> </ul> <p>By using <code>else if</code>, you make your code both faster and easier to read.</p>"},{"location":"introToJava/javaLesson2/#conditionals-with-booleans","title":"Conditionals with booleans","text":"<p>Conditionals can also be used with booleans directly, since they can only be either true or false. The snippet below provides an example.</p> <pre><code>boolean carIsOn = true;\n\nif (carIsOn) {\n    System.out.println(\"Ready to drive\");\n}\nelse {\n    System.out.println(\"Turn car on to drive\");\n}\n</code></pre> <p>Output<pre><code>Ready to drive\n</code></pre> You wouldn't need to say <code>if (carIsOn==true)</code>, since Java knows that since its a boolean value, it can only be true or false, so it handles the checking for you.</p> <p>Usage of <code>else</code> and <code>else if</code></p> <p>You won't always need an <code>else if</code> or even an <code>else</code> condition. This depends on your code and if you want to do something if the first <code>if</code> condition is false.</p>"},{"location":"introToJava/javaLesson2/#for-loops","title":"For Loops","text":"<p>A <code>for</code> loop is a way to repeat a block of code a set number of times. Think of it like this: imagine you\u2019re told to do 10 push-ups. Instead of someone saying \u201cDo a push-up, do a push-up, do a push-up\u2026\u201d ten times, they just say \u201cDo 10 push-ups.\u201d A <code>for</code> loop works the same way \u2014 it repeats your instructions automatically until the count is done.</p>"},{"location":"introToJava/javaLesson2/#syntax","title":"Syntax","text":"<p>The proper way to write a for loop uses a variable, typically called <code>i</code>, to keep track of how many times the loop has run. An example is shown below.</p> <pre><code>for (int i=0;i&lt;10;i++) {\n    // Do a push-up\n}\n</code></pre> <p>You can break down the inside, <code>int i=0;i&lt;10;i++</code>, into three main parts: Initialization, condition, and update/increment.</p>"},{"location":"introToJava/javaLesson2/#initialization","title":"Initialization","text":"<p>Just like when you create a member, Java needs a variable inside the loop to keep track of how many times it has run. This follows the same pattern you\u2019ve already seen: <code>type name = value</code>. In the example above, the type is <code>int</code>, the name is <code>i</code>, and the starting value is <code>0</code>. That means the counter variable <code>i</code> begins at 0, and Java will use it to control how many times the loop repeats. You may also begin the counter <code>i</code> above <code>0</code>, which is typically used when counting down.</p>"},{"location":"introToJava/javaLesson2/#condition","title":"Condition","text":"<p>This part of the <code>for</code> loop statement \u2014 the condition \u2014 controls how many times your code will repeat. The condition is checked before each iteration, and the loop only continues if it evaluates to <code>true</code>. The condition is usually written in the form: <code>name&lt;value</code>. Here, name is the variable from the initialization, and value sets the stopping point.</p> <p>Use of &lt;</p> <p>At first glance, a condition like <code>i &lt; 10</code> might seem like the loop will only run 9 times. However, since the counter <code>i</code> starts at <code>0</code>, the loop runs for <code>i = 0, 1, 2, ..., 9</code>, which is 10 iterations total. This \u201czero-based counting\u201d is standard practice in Java (and most programming languages).</p> <p>Examples of conditions you can use:</p> <ul> <li> <p>Less than (i &lt; 10) \u2192 loop runs while i is less than 10.</p> </li> <li> <p>Less than or equal to (i &lt;= 10) \u2192 loop runs while i is less than or equal to 10 (so it runs 11 times if starting from 0).</p> </li> <li> <p>Greater than (i &gt; 0) \u2192 often used when counting down.</p> </li> <li> <p>Greater than or equal to (i &gt;= 0) \u2192 loop continues until i drops below 0.</p> </li> <li> <p>Equality check (i == 5) \u2192 less common, but possible if you only want to run when i hits a specific value.</p> </li> </ul>"},{"location":"introToJava/javaLesson2/#update","title":"Update","text":"<p>The update (also called the increment) is the last portion of a <code>for</code> loop. It controls how the loop variable changes after each iteration. In most cases, such as the example, this is written as <code>i++</code>, which means \u201cincrease <code>i</code> by 1.\u201d</p> <p>The update is essential \u2014 without it, the condition might never be met, causing an infinite loop.</p> <p>Examples of updates:</p> <ul> <li> <p><code>i++</code>: increases by 1 (most common).</p> </li> <li> <p><code>i--</code>: decreases by 1 (useful for counting down).</p> </li> <li> <p><code>i += 2</code>: increases by 2 (counts even numbers if starting at 0).</p> </li> <li> <p><code>i *= 2</code>: doubles the value each time.</p> </li> </ul> <p>The update doesn\u2019t always have to be an increment; it can be any expression that changes the loop variable. This flexibility allows for loops to handle many patterns, like skipping numbers, looping backward, or growing exponentially.</p>"},{"location":"introToJava/javaLesson2/#combining-initialization-condition-and-update","title":"Combining initialization, condition, and update","text":"<p>The example below shows how you can use the three components of a <code>for</code> loop to count down from 10, skipping every other number.</p> <p><pre><code>for (int i=10; i&gt;=0; i -=2) {\n    System.out.print(i + \" \");\n}\n</code></pre> Output<pre><code>10 8 6 4 2 0 \n</code></pre></p> <p>Here, the <code>i</code> variable starts at 10 and we decrease it by 2 every time the loop runs. This continues while <code>i</code> is greater than or equal to 0.</p>"},{"location":"introToJava/javaLesson2/#practice","title":"Practice","text":"<p>Look at the code below. What will it print?</p> IdentifyAnswers <pre><code>for (int i = 0; i &lt;= 5; i++) {\n    if (i % 2 == 0) {\n        System.out.println(i + \" is even\");\n    } else if (i &gt; 3) {\n        System.out.println(i + \" is greater than 3 and odd\");\n    } else {\n        System.out.println(i + \" is odd\");\n    }\n}\n</code></pre> Output<pre><code>0 is even\n1 is odd\n2 is even\n3 is odd\n4 is even\n5 is greater than 3 and odd\n</code></pre>"},{"location":"introToJava/javaLesson3/","title":"Lesson 3: Classes, Objects, And Constructors","text":""},{"location":"introToJava/javaLesson3/#classes","title":"Classes","text":"<p>A class in Java is like a blueprint for something you are trying to make. Imagine a blueprint for the car from the last lesson. You cannot physically drive the blueprint, but you can follow it to make the actual car. Similarly, classes themselves cannot do anything, but the class can be used to create an object that can do things.</p> <p>All methods and members reside in a class. Most Java projects start with a <code>Main</code> class, titled <code>Main.java</code>. This is where your main code lives. For FRC, <code>Main.java</code> is taken care of by WPILib, so we won't ever have to touch it.</p> <p>Important</p> <p>Your class name MUST match the name and capitalization of the file for it to run. It is something that is specific to Java and will cause an error if not followed.</p> Car.java<pre><code>public class Car {\n   // Your methods and members will go here\n}\n</code></pre> <p>Writing classes in Java is pretty simple. All it requires is the name of the class. The above example creates a class named <code>Car</code> in the <code>Car.java</code> file.</p>"},{"location":"introToJava/javaLesson3/#objects","title":"Objects","text":"<p>An object is a real, usable thing created from a class, which is like its blueprint or recipe. The class describes what the object can have and can do, but by itself, it\u2019s not something you can use yet.</p> <p>When you create an object, it gets its own data (called members or fields), which stores information about that specific object. It also gets methods, which are the actions it can perform.</p> <p>For example, for the Car class: it might say that every car has a color, speed, and fuelLevel, and that it can drive(), brake(), or honk(). When you make a car object, you now have a real car in your program: it might be red, going 50 mph, and able to honk whenever you call myCar.honk().</p>"},{"location":"introToJava/javaLesson3/#how-to-create-an-object","title":"How to create an object","text":"<p>Creating an object, or making it exist, is called instantiation. Instantiation refers to the fact that you are creating a unique instance of a class. Although many cars may use the same blueprint to build them, they may vary in tiny details, such as their color, top speed, or model. Each specific car is called an instance. The snippet below shows how to instantiate an object.</p> <p><pre><code>class name = new class();\nCar Acura = new Car(\"red\", 50);\n</code></pre> To instantiate and object, you must first specify its class. Just like how you must tell Java what type of member you are creating, you must tell it what type of object you are creating. </p> <p>Then, you provide a name for the object. Much like methods and members, the name of an object is anything that describes what the object is. </p> <p>Next, you must use the <code>new</code> operator to create a new car. </p> <p>Finally, you must specify the class once again so that Java knows what blueprint to use to build the object.</p> <p>Additionally, if your class contains members, you can define it inside the parenthesis. This takes advantage of the object being a unique instance, meaning you can have multiple Acuras of a variety of colors. In this example, the car is red and starts at 50 mph.</p>"},{"location":"introToJava/javaLesson3/#using-an-object","title":"Using an object","text":"<p>Java is an object-oriented program language, which means that objects will take the members and methods of a class. This allows objects created by <code>instantiation</code> to perform actions of its assigned class. This is done using the dot operator, which is simply a <code>.</code> placed after the object name, which allows you to access the methods and members of the instance.</p> Main.javaCar.java Main.java<pre><code>public class Main {\n    Car Acura = new Car(\"red\");\n\n    Acura.drive();\n\n    System.out.println(Acura.color);\n\n    Car Toyota = new Car(\"orange\");\n\n    Toyota.drive();\n\n    System.out.println(Toyota.color);\n}\n</code></pre> Car.java<pre><code>public class Car {\n    private String color;\n\n    public void drive() {\n        // insert drive code\n    }\n\n    public void stop() {\n        // insert stop code\n    }\n}\n</code></pre> <p>Output<pre><code>red\norange\n</code></pre> In the above example, we have instantiated two unique cars, an Acura and a Toyota. Since both the Acura and the Toyota are made from the <code>Car</code> class, they can both drive and stop. However, since they are objects unique of each other, they each have their own color, which is also accessed using the dot operator.</p>"},{"location":"introToJava/javaLesson3/#constructors","title":"Constructors","text":"<p>A constructor is a special method in Java that connects your object instantiation to the class blueprint. Think of it like this: The object instiation is a person looking to get a house built, the class is the blueprint for the house, and the constructor is the one who builds the house using the blueprint and adding in the buyer's preferences.</p> <p>In the above example, the constructor would be in charge of making a red car that starts at 50 mph using a blueprint for a generic car.</p> <pre><code>graph LR\n    A[Object Instantiation] --&gt;|I want a red car| B[Constructor];\n    D[Class] --&gt; |Here's instructions for a car of color _x_|B;\n    B --&gt; C[Red Car Created];</code></pre>"},{"location":"introToJava/javaLesson3/#writing-a-constructor","title":"Writing a constructor","text":"<p>Constructors exist in the class. Highlighted below is an example constructor for the <code>Car</code> class.</p> <p>Car.java<pre><code>public class Car {\n    private String color;\n\n    public Car(String color) {\n        this.color = color;\n    }\n}\n</code></pre> This constructor assigns the color specified during instantiation to the specific instance of the car.</p>"},{"location":"introToJava/javaLesson3/#combining-classes-objects-and-constructors","title":"Combining Classes, Objects, and Constructors","text":"Main.javaCar.java Main.java<pre><code>public class Main {\n    Car Acura = new Car(\"red\");\n}\n</code></pre> Car.java<pre><code>public class Car {\n    private String color;\n\n    public Car(String color) {\n        this.color = color;\n    }\n\n    public void drive() {\n        // insert drive code\n    }\n\n    public void stop() {\n        // insert stop code\n    }\n}\n</code></pre> <p>Here's what happens when you run the code above:</p> <ol> <li>A new object of type <code>Car</code> named <code>Acura</code> is attempting to be instantiated. It wants to be a red car. This happens in the <code>Main.java</code> file.</li> <li>The <code>Car</code> constructor is called with the argument <code>\"red\"</code>. This happens in the <code>Car.java</code> file.</li> <li>The constructor assigns the value <code>\"red\"</code> to the <code>color</code> field of the <code>Acura</code> object.</li> <li>The <code>Acura</code> object is now fully instantiated and represents a red car. This car can use the methods outlined in the <code>Car.java</code> class, such as drive() and stop().</li> </ol>"},{"location":"introToJava/javaLesson3/#practice","title":"Practice","text":"<p>See if you can correctly identify the class, object, and constructor in the following code snippet.</p> IdentifyAnswers <pre><code>public class Car {\nprivate String color;\n\n    public Car(String color) {\n        this.color = color;\n    }\n\n    public void honk() {\n        System.out.println(\"Beep!\");\n    }\n}\n\nCar acura = new Car(\"red\");\n</code></pre> <pre><code>public class Car { ... } // Class\npublic Car(String color) { ... } // Constructor\nCar acura = new Car(\"red\"); // Object instantiation\n</code></pre>"},{"location":"introToJava/javaLesson4/","title":"Lesson 4: Using Git","text":""},{"location":"introToJava/whyJava/","title":"Why Java?","text":"<p>Java is a versatile programming language that is used for various sorts of applications, ranging from entriprise and mobile applications, IOT projects, and, in our case, for FRC programming. Java is one of the three officially supported programming lanuages for FRC: Java, Python, and C++. </p> <p>Many FRC teams choose Java for its ease-of-use compared to C++ and its versatility when compared to Python. Below is an example of the same code, using a joystick to control a motor, written in Java, C++, and Python.</p> JavaC++Python <pre><code>// Import WPILib classes\nimport edu.wpi.first.wpilibj.Joystick;\nimport edu.wpi.first.wpilibj.PWMVictorSPX;\n\npublic class Robot extends TimedRobot {\n    private final Joystick joystick = new Joystick(0);\n    private final PWMVictorSPX motor = new PWMVictorSPX(0);\n\n    @Override\n    public void teleopPeriodic() {\n        double speed = joystick.getY();   // Strongly typed: always a double\n        motor.set(speed);                 // Easy, safe, no pointers\n    }\n}\n</code></pre> <pre><code>#include &lt;frc/Joystick.h&gt;\n#include &lt;frc/PWMVictorSPX.h&gt;\n#include &lt;frc/TimedRobot.h&gt;\n\nclass Robot : public frc::TimedRobot {\n    frc::Joystick joystick{0};\n    frc::PWMVictorSPX motor{0};\n\n    void TeleopPeriodic() override {\n        double speed = joystick.GetY();  // Works, but watch for precision issues\n        motor.Set(speed);                // Must manage lifetimes carefully\n    }\n};\n</code></pre> <pre><code>from wpilib import Joystick, PWMVictorSPX, TimedRobot\n\nclass MyRobot(TimedRobot):\n    def robotInit(self):\n        self.joystick = Joystick(0)\n        self.motor = PWMVictorSPX(0)\n\n    def teleopPeriodic(self):\n        speed = self.joystick.getY()  # Dynamically typed\n        self.motor.set(speed)\n</code></pre> <p>In the example above, you can see that Java\u2019s syntax is easier to read and understand compared to C++. For instance, creating objects in Java uses the simple <code>new</code> keyword, while C++ requires <code>::</code> and more complex type declarations, which can be confusing for beginners.</p> <p>Python may look simpler than Java at first glance, but it isn\u2019t fully supported by WPILib. This means that when you try more advanced robot programming tasks, Python can quickly become limiting.</p> <p>Note</p> <p>This course will not cover the entire Java language, as it is vast and continually expanding. However, it will introduce you to the basics you need to write effective FRC robot code, allowing you to confidently control motors, read sensors, and structure your robot programs for both teleoperated and autonomous modes.</p> <p>In summary, Java strikes a balance between readability, safety, and official FRC support. It allows new programmers to quickly understand and write robot code without getting bogged down by complex syntax or unsupported libraries. With this foundation, you\u2019re now ready to dive into your first Java robot project and start controlling motors and sensors on your robot.</p>"}]}